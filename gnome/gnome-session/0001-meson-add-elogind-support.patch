From 5a6218a81e17c6e73dbed0b654ace086e121e8b5 Mon Sep 17 00:00:00 2001
From: Nathaniel Russell <naterussell83@gmail.com>
Date: Thu, 11 Jan 2024 21:17:59 -0600
Subject: [PATCH] meson: add elogind support

systemd session management (AKA logind) works with elogind. Just add an
option to enable elogind and modify the defines a little bit to get it
to build with systemd session management support.
---
 data/meson.build                  | 119 +++++-----
 gnome-session/gsm-autostart-app.c |   8 +
 gnome-session/gsm-manager.c       |  20 ++
 gnome-session/gsm-systemd.c       |  10 +
 gnome-session/gsm-util.c          |   5 +
 gnome-session/gsm-util.h          |   3 +-
 gnome-session/main.c              |  17 +-
 meson.build                       | 142 ++++++++----
 meson_options.txt                 |   4 +
 tools/meson.build                 |   4 +-
 21 files changed, 920 insertions(+), 580 deletions(-)

diff --git a/data/meson.build b/data/meson.build
index 006000e9..229190c9 100644
--- a/data/meson.build
+++ b/data/meson.build
@@ -108,68 +108,69 @@ install_data(
   install_dir: join_paths(session_datadir, 'glib-2.0', 'schemas'),
 )
 
-unit_conf = configuration_data()
-unit_conf.set('libexecdir', session_libexecdir)
-
-systemd_service = ['gnome-session-manager@.service',
-                    'gnome-session-signal-init.service',
-                    'gnome-session-restart-dbus.service',
-                    'gnome-session-monitor.service',
-                    'gnome-session-failed.service']
-
-foreach service: systemd_service
-  configure_file(
-    input: service + '.in',
-    output: service,
-    install: true,
-    install_dir: systemd_userunitdir,
-    configuration: unit_conf
-  )
-endforeach
-
-systemd_target = files('gnome-session-wayland@.target',
-                        'gnome-session-wayland.target',
-                        'gnome-session-x11@.target',
-                        'gnome-session-x11.target',
-                        'gnome-session-x11-services.target',
-                        'gnome-session-x11-services-ready.target',
-                        'gnome-session@.target',
-                        'gnome-session.target',
-                        'gnome-session-pre.target',
-                        'gnome-session-manager.target',
-                        'gnome-session-initialized.target',
-                        'gnome-session-shutdown.target',
-                        'gnome-session-failed.target',
-                        )
-
-install_data(
-  systemd_target,
-  install_dir: systemd_userunitdir
-)
-
-install_data(
-  'gnome-launched-override.scope.conf',
-  rename: 'override.conf',
-  install_dir : join_paths(systemd_userunitdir, 'gnome-launched-.scope.d')
-)
-
-foreach session, req_components: required_components
-  wanted_targets = []
-  foreach component: req_components
-    wanted_targets += 'Wants=@0@.target'.format(component)
+if enable_systemd_session
+  unit_conf = configuration_data()
+  unit_conf.set('libexecdir', session_libexecdir)
+
+  systemd_service = ['gnome-session-manager@.service',
+                     'gnome-session-signal-init.service',
+                     'gnome-session-restart-dbus.service',
+                     'gnome-session-monitor.service',
+                     'gnome-session-failed.service']
+
+  foreach service: systemd_service
+    configure_file(
+      input: service + '.in',
+      output: service,
+      install: true,
+      install_dir: systemd_userunitdir,
+      configuration: unit_conf
+    )
   endforeach
 
-  configure_file(
-    input: session + '.session.conf.in',
-    output: session + '.session.conf',
-    configuration: {
-      'requires_component': shell_component[session],
-      'wants_required_components': '\n'.join(wanted_targets),
-    },
-    install_dir: systemd_userunitdir / 'gnome-session@@0@.target.d'.format(
-      session),
+  systemd_target = files('gnome-session-wayland@.target',
+                         'gnome-session-wayland.target',
+                         'gnome-session-x11@.target',
+                         'gnome-session-x11.target',
+                         'gnome-session-x11-services.target',
+                         'gnome-session-x11-services-ready.target',
+                         'gnome-session@.target',
+                         'gnome-session.target',
+                         'gnome-session-pre.target',
+                         'gnome-session-manager.target',
+                         'gnome-session-initialized.target',
+                         'gnome-session-shutdown.target',
+                         'gnome-session-failed.target',
+                         )
+
+  install_data(
+    systemd_target,
+    install_dir: systemd_userunitdir
   )
-endforeach
+  install_data(
+    'gnome-launched-override.scope.conf',
+    rename: 'override.conf',
+    install_dir : join_paths(systemd_userunitdir, 'gnome-launched-.scope.d')
+  )
+
+  foreach session, req_components: required_components
+    wanted_targets = []
+    foreach component: req_components
+      wanted_targets += 'Wants=@0@.target'.format(component)
+    endforeach
+
+    configure_file(
+      input: session + '.session.conf.in',
+      output: session + '.session.conf',
+      configuration: {
+        'requires_component': shell_component[session],
+        'wants_required_components': '\n'.join(wanted_targets),
+      },
+      install_dir: systemd_userunitdir / 'gnome-session@@0@.target.d'.format(
+        session),
+    )
+   endforeach
+endif
 
 data = files('hardware-compatibility')
 
diff --git a/gnome-session/gsm-autostart-app.c b/gnome-session/gsm-autostart-app.c
index fbac8e71..ea59fec3 100644
--- a/gnome-session/gsm-autostart-app.c
+++ b/gnome-session/gsm-autostart-app.c
@@ -31,8 +31,12 @@
 #define GNOME_DESKTOP_USE_UNSTABLE_API
 #include <libgnome-desktop/gnome-systemd.h>
 
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
+#ifdef ENABLE_SYSTEMD_JOURNAL
 #include <systemd/sd-journal.h>
+#endif
 #include <systemd/sd-daemon.h>
+#endif
 
 #include "gsm-autostart-app.h"
 #include "gsm-util.h"
@@ -957,6 +961,7 @@ app_launched (GAppLaunchContext *ctx,
                                    NULL, NULL, NULL);
 }
 
+#ifdef ENABLE_SYSTEMD_JOURNAL
 static void
 on_child_setup (GsmAutostartApp *app)
 {
@@ -983,6 +988,7 @@ on_child_setup (GsmAutostartApp *app)
                 close (standard_error);
         }
 }
+#endif
 
 static gboolean
 autostart_app_start_spawn (GsmAutostartApp *app,
@@ -1033,10 +1039,12 @@ autostart_app_start_spawn (GsmAutostartApp *app,
                 g_app_launch_context_setenv (ctx, "DESKTOP_AUTOSTART_ID", startup_id);
         }
 
+#ifdef ENABLE_SYSTEMD_JOURNAL
         if (sd_booted () > 0) {
                 child_setup_func = (GSpawnChildSetupFunc) on_child_setup;
                 child_setup_data = app;
         }
+#endif
 
         handler = g_signal_connect (ctx, "launched", G_CALLBACK (app_launched), app);
         success = g_desktop_app_info_launch_uris_as_manager (priv->app_info,
diff --git a/gnome-session/gsm-manager.c b/gnome-session/gsm-manager.c
index ac2d6f04..e6beaf97 100644
--- a/gnome-session/gsm-manager.c
+++ b/gnome-session/gsm-manager.c
@@ -40,9 +40,17 @@
 #include "gsm-manager.h"
 #include "org.gnome.SessionManager.h"
 
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
 #include <systemd/sd-journal.h>
+#endif
 
+#ifdef HAVE_SYSTEMD
 #include <systemd/sd-daemon.h>
+#else
+/* So we don't need to add ifdef's everywhere */
+#define sd_notify(u, m)            do {} while (0)
+#define sd_notifyf(u, m, ...)      do {} while (0)
+#endif
 
 #include "gsm-store.h"
 #include "gsm-inhibitor.h"
@@ -276,10 +284,12 @@ on_required_app_failure (GsmManager  *manager,
                 allow_logout = !_log_out_is_locked_down (manager);
         }
 
+#ifdef ENABLE_SYSTEMD_JOURNAL
         sd_journal_send ("MESSAGE_ID=%s", GSM_MANAGER_UNRECOVERABLE_FAILURE_MSGID,
                          "PRIORITY=%d", 3,
                          "MESSAGE=Unrecoverable failure in required component %s", app_id,
                          NULL);
+#endif
 
         gsm_fail_whale_dialog_we_failed (FALSE,
                                          allow_logout,
@@ -304,10 +314,12 @@ on_display_server_failure (GsmManager *manager,
                 extensions = NULL;
         }
 
+#ifdef ENABLE_SYSTEMD_JOURNAL
         sd_journal_send ("MESSAGE_ID=%s", GSM_MANAGER_UNRECOVERABLE_FAILURE_MSGID,
                          "PRIORITY=%d", 3,
                          "MESSAGE=Unrecoverable failure in required component %s", app_id,
                          NULL);
+#endif
 
         gsm_quit ();
 }
@@ -962,6 +974,7 @@ _client_stop (const char *id,
         return FALSE;
 }
 
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
 static void
 maybe_restart_user_bus (GsmManager *manager)
 {
@@ -994,6 +1007,7 @@ maybe_restart_user_bus (GsmManager *manager)
                 g_debug ("GsmManager: reloading user bus failed: %s", error->message);
         }
 }
+#endif
 
 static void
 do_phase_exit (GsmManager *manager)
@@ -1006,8 +1020,10 @@ do_phase_exit (GsmManager *manager)
                                    NULL);
         }
 
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
         if (!priv->systemd_managed)
                 maybe_restart_user_bus (manager);
+#endif
 
         end_phase (manager);
 }
@@ -1401,10 +1417,14 @@ start_phase (GsmManager *manager)
                 do_phase_startup (manager);
                 break;
         case GSM_MANAGER_PHASE_RUNNING:
+        
+#ifdef ENABLE_SYSTEMD_JOURNAL
                 sd_journal_send ("MESSAGE_ID=%s", GSM_MANAGER_STARTUP_SUCCEEDED_MSGID,
                                  "PRIORITY=%d", 5,
                                  "MESSAGE=Entering running state",
                                  NULL);
+#endif
+
                 gsm_xsmp_server_start_accepting_new_clients (priv->xsmp_server);
                 if (priv->pending_end_session_tasks != NULL)
                         complete_end_session_tasks (manager);
diff --git a/gnome-session/gsm-systemd.c b/gnome-session/gsm-systemd.c
index 9361496e..986bbf7a 100644
--- a/gnome-session/gsm-systemd.c
+++ b/gnome-session/gsm-systemd.c
@@ -21,6 +21,7 @@
 #include "config.h"
 #include "gsm-systemd.h"
 
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
 #include <errno.h>
 #include <string.h>
 #include <stdlib.h>
@@ -1169,4 +1170,13 @@ sd_proxy_signal_cb (GDBusProxy  *proxy,
         }
 }
 
+#else
+
+GsmSystemd *
+gsm_systemd_new (void)
+{
+        return NULL;
+}
+
+#endif
 
diff --git a/gnome-session/gsm-util.c b/gnome-session/gsm-util.c
index c96dd477..c50164c0 100644
--- a/gnome-session/gsm-util.c
+++ b/gnome-session/gsm-util.c
@@ -626,6 +626,7 @@ gsm_util_export_activation_environment (GError     **error)
         return environment_updated;
 }
 
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
 gboolean
 gsm_util_export_user_environment (GError     **error)
 {
@@ -884,6 +885,7 @@ gsm_util_systemd_reset_failed (GError **error)
 
         return TRUE;
 }
+#endif
 
 void
 gsm_util_setenv (const char *variable,
@@ -907,12 +909,15 @@ gsm_util_setenv (const char *variable,
                 g_clear_error (&error);
         }
 
+#ifdef HAVE_SYSTEMD
         /* If this fails, the system user session won't get the updated environment
          */
         if (!gsm_util_update_user_environment (variable, value, &error)) {
                 g_debug ("Could not make systemd aware of %s=%s environment variable: %s", variable, value, error->message);
                 g_clear_error (&error);
         }
+#endif
+  
 }
 
 const char * const *
diff --git a/gnome-session/gsm-util.h b/gnome-session/gsm-util.h
index 7267e757..a00d42b3 100644
--- a/gnome-session/gsm-util.h
+++ b/gnome-session/gsm-util.h
@@ -53,6 +53,7 @@ const char * const * gsm_util_listenv               (void);
 const char * const * gsm_util_get_variable_blacklist(void);
 
 gboolean    gsm_util_export_activation_environment  (GError     **error);
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
 gboolean    gsm_util_export_user_environment        (GError     **error);
 gboolean    gsm_util_systemd_unit_is_active         (const char  *unit,
                                                      GError     **error);
@@ -60,7 +61,7 @@ gboolean    gsm_util_start_systemd_unit             (const char  *unit,
                                                      const char  *mode,
                                                      GError     **error);
 gboolean    gsm_util_systemd_reset_failed           (GError     **error);
-
+#endif
 
 void        gsm_quit                                (void);
 
diff --git a/gnome-session/main.c b/gnome-session/main.c
index 11fd41e8..6795aff5 100644
--- a/gnome-session/main.c
+++ b/gnome-session/main.c
@@ -43,11 +43,14 @@
 #include "gsm-system.h"
 #include "gsm-fail-whale.h"
 
+#ifdef ENABLE_SYSTEMD_JOURNAL
 #include <systemd/sd-journal.h>
+#endif
 
 #define GSM_DBUS_NAME "org.gnome.SessionManager"
 
 static gboolean systemd_service = FALSE;
+static gboolean use_systemd = USE_SYSTEMD_SESSION;
 static gboolean failsafe = FALSE;
 static gboolean show_version = FALSE;
 static gboolean debug = FALSE;
@@ -280,6 +283,7 @@ initialize_gio (void)
         }
 }
 
+#ifdef ENABLE_SYSTEMD_SESSION
 static gboolean
 leader_term_or_int_signal_cb (gpointer data)
 {
@@ -383,6 +387,7 @@ systemd_leader_run(void)
         gsm_main ();
         exit(0);
 }
+#endif /* ENABLE_SYSTEMD_SESSION */
 
 int
 main (int argc, char **argv)
@@ -397,7 +402,9 @@ main (int argc, char **argv)
         guint             name_owner_id;
         GOptionContext   *options;
         static GOptionEntry entries[] = {
+#ifdef ENABLE_SYSTEMD_SESSION
                 { "systemd-service", 0, 0, G_OPTION_ARG_NONE, &systemd_service, N_("Running as systemd service"), NULL },
+#endif
                 { "autostart", 'a', 0, G_OPTION_ARG_STRING_ARRAY, &override_autostart_dirs, N_("Override standard autostart directories"), N_("AUTOSTART_DIR") },
                 { "session", 0, 0, G_OPTION_ARG_STRING, &opt_session_name, N_("Session to use"), N_("SESSION_NAME") },
                 { "debug", 0, 0, G_OPTION_ARG_NONE, &debug, N_("Enable debugging code"), NULL },
@@ -451,6 +458,7 @@ main (int argc, char **argv)
          * journald picks ups the nicer "gnome-session" as the program
          * name instead of whatever shell script GDM happened to use.
          */
+#ifdef ENABLE_SYSTEMD_SESSION
         if (!debug) {
                 int journalfd;
 
@@ -460,6 +468,7 @@ main (int argc, char **argv)
                         dup2(journalfd, 2);
                 }
         }
+#endif
 
         gdm_log_init ();
         gdm_log_set_debug (debug);
@@ -533,12 +542,14 @@ main (int argc, char **argv)
         }
 
         session_name = opt_session_name;
-
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
         gsm_util_export_user_environment (&error);
         if (error && !g_getenv ("RUNNING_UNDER_GDM"))
                 g_warning ("Failed to upload environment to systemd: %s", error->message);
         g_clear_error (&error);
+#endif
 
+#ifdef ENABLE_SYSTEMD_SESSION
         if (!systemd_service) {
                 const gchar *session_type = NULL;
                 g_autofree gchar *gnome_session_target = NULL;
@@ -586,7 +597,7 @@ main (int argc, char **argv)
                         exit (1);
                 }
         }
-
+#endif /* ENABLE_SYSTEMD_SESSION */
         {
                 gchar *ibus_path;
 
@@ -622,7 +633,9 @@ main (int argc, char **argv)
 
         gsm_main ();
 
+#if defined(HAVE_SYSTEMD) || defined(HAVE_ELOGIND)
         gsm_util_export_user_environment (NULL);
+#endif
 
         g_clear_object (&manager);
         g_free (gl_renderer);
diff --git a/meson.build b/meson.build
index 6886f5c8..f37aab46 100644
--- a/meson.build
+++ b/meson.build
@@ -3,21 +3,28 @@ project(
   version: '46.alpha',
   license: 'GPL2+',
   default_options: 'buildtype=debugoptimized',
-  meson_version: '>= 0.60.0'
+  meson_version: '>= 0.53.0'
 )
 
+prefix = get_option('prefix')
 session_version = meson.project_version()
 session_api_name = '@0@-@1@'.format(meson.project_name(), session_version.split('.')[0])
 
 session_prefix = get_option('prefix')
 session_bindir = join_paths(session_prefix, get_option('bindir'))
 session_datadir = join_paths(session_prefix, get_option('datadir'))
+session_libdir = join_paths(session_prefix, get_option('libdir'))
 session_libexecdir = join_paths(session_prefix, get_option('libexecdir'))
 session_localedir = join_paths(session_prefix, get_option('localedir'))
+session_localstatedir = join_paths(session_prefix, get_option('localstatedir'))
+session_mandir = join_paths(session_prefix, get_option('mandir'))
+session_sbindir = join_paths(session_prefix, get_option('sbindir'))
 session_sysconfdir = join_paths(session_prefix, get_option('sysconfdir'))
 
 session_pkgdatadir = join_paths(session_datadir, meson.project_name())
 
+session_debug = get_option('buildtype').contains('debug')
+
 cc = meson.get_compiler('c')
 
 config_h = configuration_data()
@@ -39,7 +46,8 @@ endforeach
 # compiler flags
 common_flags = ['-DHAVE_CONFIG_H']
 
-if get_option('deprecation_flags')
+enable_deprecation_flags = get_option('deprecation_flags')
+if enable_deprecation_flags
   common_flags += [
     '-DBONOBO_DISABLE_DEPRECATED',
     '-DBONOBO_DISABLE_SINGLE_INCLUDES',
@@ -59,7 +67,7 @@ if get_option('deprecation_flags')
 endif
 
 compiler_flags = []
-if get_option('debug')
+if session_debug
   test_cflags = [
     '-Werror=format=2',
     '-Werror=implicit-function-declaration',
@@ -103,18 +111,69 @@ session_bin_deps = session_deps + [
 # Check for session selector GTK+ UI
 enable_session_selector = get_option('session_selector')
 
-session_bin_deps += dependency('gio-unix-2.0', version: glib_req_version)
-
-# Check for systemd
-systemd_userunitdir = get_option('systemduserunitdir')
-if systemd_userunitdir == ''
-  systemd_dep = dependency('systemd', version: '>= 242', required: true)
-  systemd_userunitdir = systemd_dep.get_variable(pkgconfig: 'systemduserunitdir',
-                                                 pkgconfig_define: ['prefix', session_prefix])
+# Check for session tracking backend
+session_tracking = 'null backend'
+
+enable_systemd = get_option('systemd')
+enable_systemd_session = get_option('systemd_session') != 'disable'
+use_systemd_session = get_option('systemd_session') == 'default'
+enable_systemd_journal = get_option('systemd_journal')
+enable_elogind = get_option('elogind')
+if enable_systemd or enable_elogind
+  session_bin_deps += dependency('gio-unix-2.0', version: glib_req_version)
+
+  # Check for systemd
+if enable_systemd
+    systemd_userunitdir = get_option('systemduserunitdir')
+    if systemd_userunitdir == ''
+      systemd_dep = dependency('systemd', version: '>= 242', required: true)
+      systemd_userunitdir = systemd_dep.get_pkgconfig_variable('systemduserunitdir',
+                                                               define_variable: ['prefix', prefix])
+    endif
+
+    libsystemd_dep = dependency('libsystemd', version: '>= 209', required: false)
+    session_bin_deps += libsystemd_dep
+
+    if not libsystemd_dep.found()
+      libsystemd_login_dep = dependency('libsystemd-login', version: '>= 183', required: false)
+      libsystemd_daemon_dep = dependency('libsystemd-daemon', required: false)
+      libsystemd_journal_dep = dependency('libsystemd-journal', required: false)
+      assert(libsystemd_login_dep.found() and libsystemd_daemon_dep.found() and libsystemd_journal_dep.found(),
+             'Systemd support explicitly required, but systemd not found')
+
+      session_bin_deps += [
+        libsystemd_login_dep,
+        libsystemd_daemon_dep,
+        libsystemd_journal_dep
+      ]
+    endif
+
+    session_tracking = 'systemd'
+  endif
+
+    if enable_systemd
+      session_tracking += ' (with fallback to ConsoleKit)'
+    else
+      session_tracking = 'ConsoleKit'
+    endif
+
+  # Check for elogind
+    if enable_elogind
+      elogind_dep = dependency('libelogind', version: '>= 209')
+      session_bin_deps += elogind_dep
+
+      session_tracking = 'elogind'
+    endif
+
+  endif
+if enable_systemd_session
+  assert(enable_systemd or enable_elogind, 'Systemd or elogind support must be enabled when using systemd session management')
 endif
-
-libsystemd_dep = dependency('libsystemd', version: '>= 209', required: true)
-session_bin_deps += libsystemd_dep
+config_h.set('HAVE_SYSTEMD', enable_systemd)
+config_h.set('ENABLE_SYSTEMD_SESSION', enable_systemd_session)
+config_h.set('ENABLE_SYSTEMD_JOURNAL', enable_systemd_journal)
+config_h.set('HAVE_ELOGIND', enable_elogind)
+config_h.set10('USE_SYSTEMD_SESSION', use_systemd_session)
 
 configure_file(
   output: 'config.h',
@@ -125,14 +184,20 @@ gnome = import('gnome')
 i18n = import('i18n')
 pkg = import('pkgconfig')
 
-po_dir = join_paths(meson.project_source_root(), 'po')
+po_dir = join_paths(meson.source_root(), 'po')
 
 top_inc = include_directories('.')
 
 subdir('gnome-session')
 subdir('tools')
 subdir('data')
-subdir('doc')
+
+enable_docbook = get_option('docbook')
+enable_man = get_option('man')
+if enable_docbook or enable_man
+  subdir('doc')
+endif
+
 subdir('po')
 
 meson.add_install_script(
@@ -140,29 +205,22 @@ meson.add_install_script(
   session_datadir
 )
 
-gnome.post_install(
-  glib_compile_schemas: true,
-)
-
-summary_options = {
- 'Debug mode': get_option('debug'),
- 'Use *_DISABLE_DEPRECATED': get_option('deprecation_flags'),
- 'Build Docbook': get_option('docbook'),
- 'Build manpages': get_option('man'),
- 'Systemd Units Directory': systemd_userunitdir,
- 'Session Selector Enabled': enable_session_selector,
-}
-
-summary_dirs = {
-  'prefix': get_option('prefix'),
-  'datadir': session_datadir,
-  'bindir': session_bindir,
-  'libexecdir': session_libexecdir,
-  'localedir': session_localedir,
-  'mandir': get_option('mandir'),
-  'sysconfdir': session_sysconfdir,
-  'pkgdatadir': session_pkgdatadir,
-}
-
-summary(summary_dirs, section: 'Directories')
-summary(summary_options, section: 'Build Options')
+output = '\n                gnome-session ' + session_version + '\n'
+output += '                ====================\n\n'
+output += '        prefix:                   ' + session_prefix + '\n'
+output += '        exec_prefix:              ' + session_libexecdir + '\n'
+output += '        libdir:                   ' + session_libdir + '\n'
+output += '        bindir:                   ' + session_bindir + '\n'
+output += '        sbindir:                  ' + session_sbindir + '\n'
+output += '        sysconfdir:               ' + session_sysconfdir + '\n'
+output += '        localstatedir:            ' + session_localstatedir + '\n'
+output += '        datadir:                  ' + session_datadir + '\n'
+output += '        source code location:     ' + meson.source_root() + '\n'
+output += '        compiler:                 ' + cc.get_id() + '\n'
+output += '        cflags:                   ' + ' '.join(compiler_flags) + '\n'
+output += '        Debug mode:               ' + session_debug.to_string() + '\n'
+output += '        Use *_DISABLE_DEPRECATED: ' + enable_deprecation_flags.to_string() + '\n\n'
+output += '        Session tracking:         ' + session_tracking + ' \n'
+output += '        Build Docbook:            ' + enable_docbook.to_string() + '\n'
+output += '        Build manpages:           ' + enable_man.to_string()
+message(output)
diff --git a/meson_options.txt b/meson_options.txt
index f146c55c..edbb1562 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -1,5 +1,9 @@
 option('deprecation_flags', type: 'boolean', value: false, description: 'use *_DISABLE_DEPRECATED flags')
 option('session_selector', type: 'boolean', value: false, description: 'enable building a custom session selector dialog')
+option('systemd', type: 'boolean', value: true, description: 'Use systemd')
+option('systemd_session', type: 'combo', choices: ['disable', 'enable', 'default'], value: 'default', description: 'Whether to include systemd session support and use it by default')
+option('systemd_journal', type: 'boolean', value:'true', description: 'Send log to systemd-journal')
 option('systemduserunitdir', type: 'string', description: 'Directory for systemd user service files')
+option('elogind', type: 'boolean', value: false, description: 'Use elogind')
 option('docbook', type: 'boolean', value: true, description: 'build documentation')
 option('man', type: 'boolean', value: true, description: 'build documentation (requires xmlto)')
diff --git a/tools/meson.build b/tools/meson.build
index 6ea37b62..b21519da 100644
--- a/tools/meson.build
+++ b/tools/meson.build
@@ -11,7 +11,9 @@ programs = [
   ['gnome-session-inhibit', session_deps, cflags, session_bindir]
 ]
 
-programs += [['gnome-session-ctl', session_bin_deps, cflags, session_libexecdir]]
+if enable_systemd_session
+  programs += [['gnome-session-ctl', session_bin_deps, cflags, session_libexecdir]]
+endif
 
 if enable_session_selector
   deps = [
-- 
GitLab

